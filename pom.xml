<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.hiwepy</groupId>
	<artifactId>fastxls</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>${project.groupId}:${project.artifactId}</name>
	<url>https://github.com/hiwepy/${project.artifactId}</url>
	<packaging>pom</packaging>

	<description>
		1、基于JXL的XLS读写实现
		2、基于POI的XLS读写实现
		3、基于JXLS的XLS写实现
		4、基于Velocity、freemarker的XLS写实现
	</description>

	<modules>
		<module>fastxls-core</module>
		<module>fastxls-jexcel</module>
		<module>fastxls-poi</module>
		<module>fastxls-struts2</module>
		<module>fastxls-webmvc</module>
		<module>fastxls-template</module>
	</modules>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:https:github.com/hiwepy/${project.artifactId}.git</connection>
		<developerConnection>scm:git:https:github.com/hiwepy/${project.artifactId}.git</developerConnection>
		<url>https:github.com/hiwepy/${project.artifactId}</url>
		<tag>${project.artifactId}</tag>
	</scm>

	<organization>
		<name>Jeebiz</name>
		<url>www.jeebiz.net</url>
	</organization>

	<developers>
		<developer>
			<name>wandl</name>
			<email>hnxyhcwdl1003@163.com</email>
			<roles>
				<role>developer</role>
			</roles>
			<timezone>+8</timezone>
		</developer>
	</developers>

	<distributionManagement>
		<repository>
			<id>nexus-releases</id>
			<name>Nexus Release Repository</name>
			<url>http://nexus.hiwepy.com/repository/maven-releases/</url>
		</repository>
		<snapshotRepository>
			<id>nexus-snapshots</id>
			<name>Nexus Snapshot Repository</name>
			<url>http://nexus.hiwepy.com/repository/maven-snapshots/</url>
			<uniqueVersion>true</uniqueVersion>
		</snapshotRepository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<encoding>${project.build.sourceEncoding}</encoding>
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-deploy-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-enforcer-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>default-cli</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<phase>validate</phase>
							<configuration>
								<rules>
									<requireMavenVersion>
										<message>
	                                        <![CDATA[You are running an older version of Maven. This application requires at least Maven ${maven.version}.]]>
										</message>
										<version>[${maven.version}.0,)</version>
									</requireMavenVersion>
									<requireJavaVersion>
										<message>
	                                        <![CDATA[You are running an older version of Java. This application requires at least JDK ${java.version}.]]>
										</message>
										<version>[${java.version}.0,)</version>
									</requireJavaVersion>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-gpg-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-install-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin.version}</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-release-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<tagNameFormat>v@{project.version}</tagNameFormat>
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<useReleaseProfile>false</useReleaseProfile>
						<releaseProfiles>release</releaseProfiles>
						<goals>deploy</goals>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.vertsion}</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!-- forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。 pretest：
							每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。 once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8</argLine>
						<additionalClasspathElements>
							<additionalClasspathElement>${basedir}/target/test-classes</additionalClasspathElement>
						</additionalClasspathElements>
						<includes>
							<include>**/*Test.java</include>
						</includes>
						<excludes>
							<exclude>**/TestBean.java</exclude>
						</excludes>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
					<configuration>
						<skipIfEmpty>true</skipIfEmpty>
						<archive>
							<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
						</archive>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-javadoc-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<charset>${project.build.sourceEncoding}</charset>
						<encoding>${project.build.sourceEncoding}</encoding>
						<docencoding>${project.build.sourceEncoding}</docencoding>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>${maven-nexus-staging-plugin.version}</version>
					<extensions>true</extensions>
					<configuration>
						<serverId>ossrh</serverId>
						<nexusUrl>https://oss.sonatype.org/</nexusUrl>
						<autoReleaseAfterClose>false</autoReleaseAfterClose>
						<!-- <sslAllowAll>true</sslAllowAll> -->
						<stagingProgressPauseDurationSeconds>60</stagingProgressPauseDurationSeconds>
						<stagingProgressTimeoutMinutes>20</stagingProgressTimeoutMinutes>
						<detectBuildFailures>true</detectBuildFailures>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!--环境监察插件：代码编译前的环境监察 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			<!-- 编译插件：编译主代码至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>
			<!-- 源码插件:发布时自动将源码同时发布 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>
			<!-- 安装插件：将项目输出构件安装到本地仓库 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
			</plugin>
			<!-- 发布插件 ：将项目输出构件部署到远程仓库 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>disable-javadoc-doclint</id>
				<activation>
					<jdk>[1.8,)</jdk>
				</activation>
			<properties>
				<additionalparam>-Xdoclint:none -Xlint:unchecked</additionalparam>
			</properties>
		</profile>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<!--环境监察插件：代码编译前的环境监察 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
					</plugin>
					<!-- 编译插件：编译主代码至主输出目录 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
					</plugin>
					<!-- 资源插件：复制主资源文件至主输出目录 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
					</plugin>
					<!-- 单元测试插件 ：执行测试用例 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>
					<!-- jar包生成插件 ：创建项目jar包 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
					</plugin>
					<!-- 源码插件:发布时自动将源码同时发布 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>
					<!-- javadoc -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
					<!-- 安装插件：将项目输出构件安装到本地仓库 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
					</plugin>
					<!-- 签名插件：对构建的jar、javadoc、source使用gpg来签名 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
					<!-- 发布插件 ：将项目输出构件部署到远程仓库 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-deploy-plugin</artifactId>
					</plugin>
					<!-- 版本自动升级插件 ：重置版本号 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-release-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<antlr.version>3.4</antlr.version>
		<antlr4.version>4.7.2</antlr4.version>
		<fastjson.version>1.2.62</fastjson.version>
		<batik.version>1.8</batik.version>
		<beetl.version>3.0.14.RELEASE</beetl.version>
		<byte-buddy.version>1.10.3</byte-buddy.version>
		<commons-beanutils.version>1.9.3</commons-beanutils.version>
		<commons-codec.version>1.11</commons-codec.version>
		<commons-collections4.version>4.4</commons-collections4.version>
		<commons-lang3.version>3.8.1</commons-lang3.version>
		<commons-logging.version>1.2</commons-logging.version>
		<commons-io.version>2.6</commons-io.version>
		<commons-imaging.version>1.0-R1534292</commons-imaging.version>
		<commons-pool2.version>2.4.2</commons-pool2.version>
		<cssparser.version>0.9.18</cssparser.version>
		<dbf.version>0.3.0</dbf.version>
		<docx4j.version>3.3.2</docx4j.version>
		<dom4j.version>1.6.1</dom4j.version>
		<fastpoi.version>1.0.0-SNAPSHOT</fastpoi.version>
		<flying-saucer.version>9.0.8</flying-saucer.version>
		<flying-saucer-fix.version>9.0.8</flying-saucer-fix.version>
		<freemarker.version>2.3.29</freemarker.version>
		<gson.version>2.2.1</gson.version>
		<guava.version>28.1-jre</guava.version>
		<httl.version>1.0.12</httl.version>
		<hibernate-validator.version>6.2.1.Final</hibernate-validator.version>
		<hitool.version>1.0.0-SNAPSHOT</hitool.version>
		<jackson.version>2.9.9</jackson.version>
		<jeekit.version>1.0.0-SNAPSHOT</jeekit.version>
		<java.version>1.8</java.version>
		<javax-activation.version>1.1.1</javax-activation.version>
		<javax.mail-api.version>1.6.2</javax.mail-api.version>
		<jdom.version>2.0.2</jdom.version>
		<jetbrick.version>2.1.10</jetbrick.version>
		<jsonlib.version>2.4</jsonlib.version>
		<json-simple.version>1.1.1</json-simple.version>
		<jsoup.version>1.12.1</jsoup.version>
		<junit.version>4.12</junit.version>
		<jxl.version>2.6.12</jxl.version>
		<jxls1.version>1.0.6</jxls1.version>
		<jxls.version>2.7.2</jxls.version>
		<jxls-reader.version>2.0.6</jxls-reader.version>
		<jxls-jexcel.version>1.0.9</jxls-jexcel.version>
		<jxls-poi.version>2.6.0-rc1</jxls-poi.version>
		<htmlparser.version>1.4</htmlparser.version>
		<lombok.version>1.18.10</lombok.version>
		<persistence.version>2.7.4</persistence.version>
		<poi.version>4.1.1</poi.version><!--3.10-FINAL -->
		<phloc-commons.version>4.6.5</phloc-commons.version>
		<phloc-html.version>4.4.5</phloc-html.version>
		<phloc-css.version>3.8.0</phloc-css.version>
		<phloc-json.version>3.0.3</phloc-json.version>
		<rythm.version>1.3.0</rythm.version>
		<servlet-api.version>3.0.1</servlet-api.version>
		<slf4j.version>1.7.26</slf4j.version>
		<struts2.version>2.5.5</struts2.version>
		<struts2-annotations.version>1.0.6</struts2-annotations.version>
		<struts2-xwork.version>2.3.31</struts2-xwork.version>
		<spring.version>4.3.5.RELEASE</spring.version><!-- 3.0.5.RELEASE，4.1.6.RELEASE，4.2.5.RELEASE， -->
		<thymeleaf.version>3.0.11.RELEASE</thymeleaf.version>
		<velocity.version>2.2</velocity.version>
		<velocity-tools.version>2.0</velocity-tools.version>
		<webit-script.version>1.5.2</webit-script.version>
		<xstream.version>1.4.8</xstream.version>
		<xml-apis.version>1.3.04</xml-apis.version>

		<maven.version>3.0</maven.version>
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<maven-assembly-plugin.version>3.1.1</maven-assembly-plugin.version>
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<maven-dependency-plugin.version>3.1.1</maven-dependency-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-enforcer-plugin.version>3.0.0-M2</maven-enforcer-plugin.version>
		<maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
		<maven-install-plugin.version>3.0.0-M1</maven-install-plugin.version>
		<maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.0.1</maven-javadoc-plugin.version>
		<maven-release-plugin.version>2.5.3</maven-release-plugin.version>
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<maven-surefire-plugin.vertsion>2.22.1</maven-surefire-plugin.vertsion>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-nexus-staging-plugin.version>1.6.8</maven-nexus-staging-plugin.version>
		<maven-nexus-yuicompressor-plugin.version>1.1.0</maven-nexus-yuicompressor-plugin.version>
		<maven-war-plugin.version>3.2.2</maven-war-plugin.version>

	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- ######################测试工具包###################### -->

			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>

			<!-- servlet 基础依赖包 -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy -->
			<dependency>
			    <groupId>net.bytebuddy</groupId>
			    <artifactId>byte-buddy</artifactId>
			    <version>${byte-buddy.version}</version>
			</dependency>

			<!-- ######################基础常用工具包###################### -->

			<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
			</dependency>

			<!-- 常用功能包括类型转换和动态bean的创建 -->
			<dependency>
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>${commons-beanutils.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>${commons-codec.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
			<dependency>
			    <groupId>org.apache.commons</groupId>
			    <artifactId>commons-collections4</artifactId>
			    <version>${commons-collections4.version}</version>
			</dependency>
			<!-- Commons项目中用来处理Java基本对象方法的工具类包， 可以简化很多平时经常要用到的写法， 例如判断字符串是否为空等等 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>
			<!-- Commons项目中用来处理IO的一些工具类包 -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<!-- Apache Commons Imaging 前身是 Apache Commons Sanselan ，这是一个用来读写各种图像格式的
				Java 类库， 包括快速解析图片的基本信息（大小、色彩空间、ICC配置等）和元数据。尽管慢点但非常好的可移植性。 比起 ImageIO/JAI/Toolkit
				更容易使用，支持更多的格式，提供简单访问元数据的方法。 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-imaging</artifactId>
				<version>${commons-imaging.version}</version>
			</dependency>
			<!--Commons-Pool 提供了通用对象池接口，一个用于创建模块化对象池的工具包，以及通常的对象池实现 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-pool2</artifactId>
				<version>${commons-pool2.version}</version>
			</dependency>

			<!-- ######################org.apache.xmlgraphics ###################### -->

			<!-- Batik是使用svg格式图片来实现各种功能的应用程序以及Applet提供的一个基于java的工具包。 -->
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-transcoder</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-util</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-ext</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-awt-util</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-svggen</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-dom</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-svg-dom</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-css</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-bridge</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-gvt</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-xml</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-codec</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-parser</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-anim</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-script</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-rasterizer</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-swing</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-gui-util</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-js</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-extension</artifactId>
				<version>${batik.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xmlgraphics</groupId>
				<artifactId>batik-ttf2svg</artifactId>
				<version>${batik.version}</version>
			</dependency>

			<!-- ###################### 词法分析、HTML、CSS 解析工具包###################### -->

			<!-- ANTLR(ANother Tool for Language Recognition)它是Java开发的词法分析工具，它可以接受词文法语言描述,
				并能产生识别这些语言的语句的程序。作为翻译程序的一部分,你可以使用简单的操 作符和动作来参数化你的文法， 使之告诉ANTLR怎样去创建抽象语法树(AST)和怎样产生输出。ANTLR知道怎样去生成识别程序，语言包括
				Java，C++，C#. Hibernate就是采用ANTLR来编译HQL查询语言的。 -->
			<dependency>
				<groupId>org.antlr</groupId>
				<artifactId>antlr</artifactId>
				<version>${antlr.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
			<!-- Jsoup is a Java library for working with real-world HTML. It provides
				a very convenient API for extracting and manipulating data, using the best
				of DOM, CSS, and jquery-like methods. jsoup implements the WHATWG HTML5 specification,
				and parses HTML to the same DOM as modern browsers do. -->
			<dependency>
				<groupId>org.jsoup</groupId>
				<artifactId>jsoup</artifactId>
				<version>${jsoup.version}</version>
			</dependency>
			<!-- css 解析工具包 -->
			<dependency>
				<groupId>net.sourceforge.cssparser</groupId>
				<artifactId>cssparser</artifactId>
				<version>${cssparser.version}</version>
			</dependency>
			<dependency>
				<groupId>nu.validator.htmlparser</groupId>
				<artifactId>htmlparser</artifactId>
				<version>${htmlparser.version}</version>
			</dependency>
			<!-- html的css解析 http://central.maven.org/maven2/com/phloc/ -->
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-commons</artifactId>
				<version>${phloc-commons.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-html</artifactId>
				<version>${phloc-html.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-json</artifactId>
				<version>${phloc-json.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-css</artifactId>
				<version>${phloc-css.version}</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-schematron</artifactId>
				<version>2.7.1</version>
			</dependency>
			<dependency>
				<groupId>com.phloc</groupId>
				<artifactId>phloc-poi</artifactId>
				<version>2.8.1</version>
			</dependency>

			<!-- ###################### Java对象、XML、JSON 解析转换工具包 ###################### -->

			<!-- Dom4j是一个Java的XML API，类似于jdom，用来读写XML文件的工具包。 -->
			<dependency>
				<groupId>dom4j</groupId>
				<artifactId>dom4j</artifactId>
				<version>${dom4j.version}</version>
			</dependency>
			<!--JDOM是一种使用 XML（标准通用标记语言下的一个子集） 的独特 Java 工具包，。它的设计包含 Java 语言的语法乃至语义。 -->
			<dependency>
				<groupId>org.jdom</groupId>
				<artifactId>jdom</artifactId>
				<version>${jdom.version}</version>
			</dependency>
			<!-- XStream是 thoughtworks开发的开源框架，用于实现XML数据于Java对象、Json数据的转换 -->
			<dependency>
				<groupId>com.thoughtworks.xstream</groupId>
				<artifactId>xstream</artifactId>
				<version>${xstream.version}</version>
			</dependency>
			<!-- Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象。 相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。而且Jackson社区相对比较活跃，更新速度也比较快。 -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.github.hiwepy</groupId>
				<artifactId>fastpoi-core</artifactId>
				<version>${fastpoi.version}</version>
			</dependency>

			<!-- fastjson 是一个性能很好的 Java 语言实现的 JSON 解析器和生成器，来自阿里巴巴的工程师开发。 主要特点： 快速FAST
				(比其它任何基于Java的解析器和生成器更快，包括jackson） 强大（支持普通JDK类包括任意Java Bean Class、Collection、Map、Date或enum）
				零依赖（没有依赖其它任何类库除了JDK） -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>${fastjson.version}</version>
			</dependency>
			<!--json-lib是一个Java类库,提供将Java对象,包括beans,maps,collections,javaarrays和xml等转换成JSON,或者反向转换的功能 -->
			<dependency>
				<groupId>net.sf.json-lib</groupId>
				<artifactId>json-lib</artifactId>
				<version>${jsonlib.version}</version>
				<classifier>jdk15</classifier>
			</dependency>
			<!-- Simple JSON是Google开发的Java JSON解析框架,基于Apache协议。 -->
			<dependency>
				<groupId>com.googlecode.json-simple</groupId>
				<artifactId>json-simple</artifactId>
				<version>${json-simple.version}</version>
			</dependency>
			<!-- Gson 是 Google 提供的用来在 Java 对象和 JSON 数据之间进行映射的 Java 类库。可以将一个 JSON 字符串转成一个
				Java 对象,或者反过来 -->
			<dependency>
				<groupId>com.google.code.gson</groupId>
				<artifactId>gson</artifactId>
				<version>${gson.version}</version>
			</dependency>

			<!-- ###################### Excel文档生成和解析工具包###################### -->

			<!--JXL -->
			<!-- https://mvnrepository.com/artifact/net.sourceforge.jexcelapi/jxl -->
			<dependency>
				<groupId>net.sourceforge.jexcelapi</groupId>
				<artifactId>jxl</artifactId>
				<version>${jxl.version}</version>
			</dependency>

			<!--POI -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-ooxml</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-scratchpad</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<!-- <dependency> <groupId>org.apache.poi</groupId> <artifactId>poi-ooxml-schemas</artifactId>
				<version>${poi.version}</version> </dependency> -->
			<!-- POI提供的poi-ooxml-schemas.jar包是精简版的，为了节省空间，放的只有一些常用的模块，所以要引用另外一些功能的话就需要引用完全版的ooxml-schemas.jar包。
				另外，3.5和3.6版本的poi对应的完整版的jar包是1.0版的，如果要用3.7及以上的，就需要用ooxml-schemas-1.1.jar这个包了，这样导入之后果然就好了。
				总结一下，遇到这个问题需要导入ooxml-schemas-1.x.jar这个包，同时去除poi提供的那个同名的包依赖. -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>ooxml-schemas</artifactId>
				<version>1.4</version>
			</dependency>
			<!-- Apache POI Excel Ant Tasks -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-excelant</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<!-- Java API To Access Microsoft Format Files -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-contrib</artifactId>
				<version>3.6</version>
			</dependency>
			<!-- Apache POI Examples -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-examples</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<!-- XmlBeans generated from various supplied xsds for encryption and
				signing -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>ooxml-security</artifactId>
				<version>1.1</version>
			</dependency>
			<!-- OpenXML4J is a Java library dedicated to the creation and manipulation
				of Office Open XML (ECMA-376) and OPC based documents (for example Office
				2007 Word, Excel and PowerPoint documents). -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>openxml4j</artifactId>
				<version>1.0-beta</version>
			</dependency>

			<!--JXLS-1.x -->
			<dependency>
				<groupId>net.sf.jxls</groupId>
				<artifactId>jxls-core</artifactId>
				<version>${jxls1.version}</version>
			</dependency>
			<dependency>
				<groupId>net.sf.jxls</groupId>
				<artifactId>jxls-reader</artifactId>
				<version>${jxls1.version}</version>
			</dependency>

			<!--JXLS-2.x -->
			<dependency>
				<groupId>org.jxls</groupId>
				<artifactId>jxls</artifactId>
				<version>${jxls.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jxls</groupId>
				<artifactId>jxls-reader</artifactId>
				<version>${jxls-reader.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jxls</groupId>
				<artifactId>jxls-jexcel</artifactId>
				<version>${jxls-jexcel.version}</version>
			</dependency>
			<dependency>
				<groupId>org.jxls</groupId>
				<artifactId>jxls-poi</artifactId>
				<version>${jxls-poi.version}</version>
			</dependency>

			<!-- ###################### Spring 4.x 核心框架 ###################### -->

			<!-- 基于代理的AOP支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 基于AspectJ的切面 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aspects</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Bean支持，包括Groovy -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 应用程序的运行时环境，包括调度和远程处理的抽象 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于把常用的第三方 类库集成到Spring的应用环境中的支持类 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 被大多数其他Spring模块使用的核心工具类 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Spring的表达式语言（SpEL） -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于JVM启动引导的监测代理 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-instrument</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于Tomcat的监测代理 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-instrument-tomcat</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- JDBC支持包，包括DataSource安装和JDBC访问支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- JMS支持包，包括发送和接收JMS消息的辅助器 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jms</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 支持消息传递的架构和协议 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-messaging</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 对象/关系映射，包括对JPA和hibernate的支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 对象/XML的映射 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 支持单元测试和集成测试的Spring组件 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 事务的基础架构，包括对DAO支持和JCA集成 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Web支持包，包括客户端和web的远程访问 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- REST的web服务和用于web应用程序的mvc实现 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- ###################### Struts2.x 核心框架 ###################### -->

			<dependency>
				<groupId>org.apache.struts</groupId>
				<artifactId>struts2-core</artifactId>
				<version>${struts2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.struts</groupId>
				<artifactId>struts-annotations</artifactId>
				<version>${struts2-annotations.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.struts.xwork</groupId>
				<artifactId>xwork-core</artifactId>
				<version>${struts2-xwork.version}</version>
			</dependency>

			<!-- ###################### 缓存框架 ###################### -->

			<!-- Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 [collections] 、缓存 [caching]
				、原生类型支持 [primitives support] 、 并发库 [concurrency libraries] 、通用注解 [common
				annotations] 、字符串处理 [string processing] 、I/O 等等。 -->
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<!-- beetl模板 -->
			<!-- https://mvnrepository.com/artifact/com.ibeetl/beetl -->
			<dependency>
				<groupId>com.ibeetl</groupId>
				<artifactId>beetl</artifactId>
				<version>${beetl.version}</version>
			</dependency>
			<!-- freemarker模板 -->
			<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->
			<dependency>
				<groupId>org.freemarker</groupId>
				<artifactId>freemarker</artifactId>
				<version>${freemarker.version}</version>
			</dependency>
			<!-- httl模板 -->
			<!-- https://mvnrepository.com/artifact/org.perfcake/httl -->
			<dependency>
				<groupId>org.perfcake</groupId>
				<artifactId>httl</artifactId>
				<version>${httl.version}</version>
			</dependency>
			<!-- jetbrick模板 -->
			<!-- https://mvnrepository.com/artifact/com.github.subchen/jetbrick-template -->
			<dependency>
				<groupId>com.github.subchen</groupId>
				<artifactId>jetbrick-template</artifactId>
				<version>${jetbrick.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.antlr/antlr4-runtime -->
			<dependency>
				<groupId>org.antlr</groupId>
				<artifactId>antlr4-runtime</artifactId>
				<version>${antlr4.version}</version>
			</dependency>
			<!-- rythm模板 -->
			<!-- https://mvnrepository.com/artifact/org.rythmengine/rythm-engine -->
			<dependency>
				<groupId>org.rythmengine</groupId>
				<artifactId>rythm-engine</artifactId>
				<version>${rythm.version}</version>
			</dependency>
			<!-- thymeleaf模板 -->
			<!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf -->
			<dependency>
				<groupId>org.thymeleaf</groupId>
				<artifactId>thymeleaf</artifactId>
				<version>${thymeleaf.version}</version>
			</dependency>
			<!-- velocity模板 -->
			<dependency>
		       <groupId>org.apache.velocity</groupId>
		       <artifactId>velocity-engine-core</artifactId>
		       <version>${velocity.version}</version>
		   </dependency>
		   <dependency>
		       <groupId>org.apache.velocity</groupId>
		       <artifactId>velocity-engine-scripting</artifactId>
		       <version>${velocity.version}</version>
		   </dependency>
			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity-tools</artifactId>
				<version>${velocity-tools.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>struts-core</artifactId>
						<groupId>org.apache.struts</groupId>
					</exclusion>
					<exclusion>
						<artifactId>struts-taglib</artifactId>
						<groupId>org.apache.struts</groupId>
					</exclusion>
					<exclusion>
						<artifactId>struts-tiles</artifactId>
						<groupId>org.apache.struts</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- webit模板 -->
			<dependency>
				<groupId>com.github.zqq90.webit-script</groupId>
				<artifactId>webit-script</artifactId>
				<version>${webit-script.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.jamel.dbf/dbf-reader -->
			<dependency>
			    <groupId>org.jamel.dbf</groupId>
			    <artifactId>dbf-reader</artifactId>
			    <version>${dbf.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
			<dependency>
			    <groupId>org.hibernate.validator</groupId>
			    <artifactId>hibernate-validator</artifactId>
			    <version>${hibernate-validator.version}</version>
			</dependency>

			<dependency>
		        <groupId>com.github.hiwepy</groupId>
				<artifactId>hitool-core</artifactId>
				<version>${hitool.version}</version>
	        </dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
